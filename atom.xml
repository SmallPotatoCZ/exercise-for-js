<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://smallpotatocz.github.io/exercise-for-js</id>
    <title>EsilyZhang</title>
    <updated>2019-06-02T12:07:14.672Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://smallpotatocz.github.io/exercise-for-js"/>
    <link rel="self" href="https://smallpotatocz.github.io/exercise-for-js/atom.xml"/>
    <subtitle>吾尝终日不食，终夜不寝，以思，无益，不如学也。</subtitle>
    <logo>https://smallpotatocz.github.io/exercise-for-js/images/avatar.png</logo>
    <icon>https://smallpotatocz.github.io/exercise-for-js/favicon.ico</icon>
    <rights>All rights reserved 2019, EsilyZhang</rights>
    <entry>
        <title type="html"><![CDATA[掌握 Console 开发者工具]]></title>
        <id>https://smallpotatocz.github.io/exercise-for-js/post/zhang-wo-console-kai-fa-zhe-gong-ju</id>
        <link href="https://smallpotatocz.github.io/exercise-for-js/post/zhang-wo-console-kai-fa-zhe-gong-ju">
        </link>
        <updated>2019-06-02T10:04:48.000Z</updated>
        <summary type="html"><![CDATA[<p>Console 的使用例子
<a href="https://blog.teamtreehouse.com/mastering-developer-tools-console">原文连接</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>Console 的使用例子
<a href="https://blog.teamtreehouse.com/mastering-developer-tools-console">原文连接</a></p>
 <!-- more -->
<h1 id="掌握-console-开发者工具">掌握 Console 开发者工具</h1>
<p>当你调试前端应用时，<code>console</code>工具是你可以使用的最强大的工具。为了调试更加简单，<code>console</code>有许多的 api 可以使用。见过的盘查问题最常用的方式是<code>console.log()</code>或<code>console.dir()</code>；但是<code>console</code>还为开发者提供了很多别的接口。</p>
<p>这篇文章你将要学习，使用<code>console</code> API 提供的方法如何去调试你的 web 应用。一些浏览器自己提供了独有的更多功能，所以我会提出其中的兼容性问题。</p>
<p>让我们开始吧。</p>
<h2 id="使用console开发者工具">使用<code>console</code>开发者工具</h2>
<p>如果你之前还没有使用<code>console</code>开发者工具，但是也不用担心。在这一小节，我将要去向你展示如何去获得和使用<code>console</code>。如果你已经对这个熟悉，放心地跳到下一小结。</p>
<p>打开你的浏览器的开发者工具有很多种的方法。最简单的是在页面的任何地方点击鼠标右键，在出现的菜单中选择<code>审查元素</code>。</p>
<p>你也可以使用快捷键去打开开发者工具。浏览器的快捷建在 Mac 上是 <code>Alt</code> + <code>Command</code> + <code>I</code>，对于 Windows 你可以使用 <code>Ctrl</code> + <code>Shift</code> + <code>I</code>。</p>
<p><img src="https://smallpotatocz.github.io/exercise-for-js/post-images/1559477173222.png" alt="谷歌开发者工具"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scope]]></title>
        <id>https://smallpotatocz.github.io/exercise-for-js/post/scope</id>
        <link href="https://smallpotatocz.github.io/exercise-for-js/post/scope">
        </link>
        <updated>2019-05-31T15:24:34.000Z</updated>
        <summary type="html"><![CDATA[<p>记录学习 JavaScript 中遇到的练习题，以便之后复习。</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录学习 JavaScript 中遇到的练习题，以便之后复习。</p>
<!-- more -->
<h1 id="作用域">作用域</h1>
<h2 id="词法作用域">词法作用域</h2>
<ol>
<li>
<p>嵌套作用域</p>
<pre><code class="language-javascript">function foo(a){
	var b = a * 2;
	function bar(c){
		console.log(a, b, c);
	}

	bar(b * 3);
}

foo(2); // 2 4 12
</code></pre>
</li>
<li>
<p><code>eval</code> 欺骗词法作用域</p>
<pre><code class="language-javascript">function foo(str, a){
	eval(str);
	console.log(a, b);
}

var b = 2;

foo(&quot;var b = 3;&quot;, 1); // 1, 3
</code></pre>
<blockquote>
<p><code>eval</code>函数动态插入变量 b。</p>
</blockquote>
<pre><code class="language-javascript">function foo(str){
	&quot;use strict&quot;;
	eval(str);
	console.log(a); // ReferenceError: a is not defined.
}

foo(&quot;var a = 2&quot;);
</code></pre>
<blockquote>
<p>严格模式下，<code>eval</code>有自己的作用域。</p>
</blockquote>
</li>
<li>
<p><code>with</code>欺骗词法作用域</p>
<pre><code class="language-javascript">function foo(obj){
	with (obj){
		a = 2;
	}
}

var o1 = {
	a: 3
};

var o2 = {
	b: 3
};


foo(o1);
console.log(o1.a);

foo(o2);
console.log(o2.a);
console.log(a);
</code></pre>
<blockquote>
<p><code>with</code> 可以将没有操作属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也被处理为定义在这个作用域中的词法标识符。</p>
</blockquote>
</li>
<li>
<p>IIFE</p>
<pre><code class="language-javascript">// 形式1
(function(a){
	console.log(a);
})(2);

// 形式2
(function(a){
	console.log(a);
}(2));
</code></pre>
<blockquote>
<p>IIFE: Immediately Invoked Function Expression
(fun...) 使 func... 成为函数表达式，而不是声明函数</p>
</blockquote>
</li>
<li>
<p>块作用域</p>
<pre><code class="language-javascript">// 忽略声明了全局变量的事实
for(var i = 0; i &lt; 5; i++){
	console.log(i);
}

// with
(function(){
	with ({a:2}){
		&quot;use strict&quot;;
		var a = 3;
		console.log('inside with', a);
	}
	console.log(a);
})();

// try/catch
try{
	undefined();
}catch(err){
	console.log(err);
}

console.log(err);

// let
if(true){
	{
		let a = 2;
		console.log(a);
	}
}

// 优化垃圾回收

function process(data){
	console.log(&quot;do something&quot;);
}

var someReallyBigData = {};

process(someReallyBigData);

var btn = document.body;
btn.addEventListener(&quot;click&quot;, function(){
	console.log(&quot;button clicked&quot;);
},/*capturingPhase*/false);
// 由于 click 函数的形成的一个覆盖这个作用域的闭包，JavaScript 引擎极有可能依然保留这个结构

// 块作用域
function process(data){
	console.log(&quot;do something&quot;);
}
{
	let someReallyBigData = {};

	process(someReallyBigData);
}

var btn = document.body;
btn.addEventListener(&quot;click&quot;, function(){
	console.log(&quot;button clicked&quot;);
},/*capturingPhase*/false);

// let-for
{
	let j;
	for(j = 0;j&lt; 5;j++){
		let i = j; // 每次迭代会重新绑定
		console.log(i);
	}
}
</code></pre>
</li>
<li>
<p>变量提升</p>
<pre><code class="language-javascript">		// 对函数作用域的引用
	function foo(){
		var a = 2;
		function bar(){
			console.log(a);
		}

		return bar;
	}

	var baz = foo();
	baz();

	// closure-for
	for(var i = 1; i &lt;= 5; i++){
		setTimeout(function timer(){
			console.log(i);
		}, i*1000);
	}
	// x
	for(var i = 1;i &lt;= 5; i++){
		(function(){
			setTimeout(function timer(){
				console.log(i);
			},i*1000);
		})();
	}
	// ^ -&gt; 
	for(var i = 1;i &lt;= 5; i++){
		(function(){
			var j = i;
			setTimeout(function timer(){
				console.log(j);
			},j*1000);
		})();
	}

	// let
	for(let i = 1;i &lt;= 5;i++){
		setTimeout(function timer(){
			console.log(i);
		},i*1000);
	}
</code></pre>
</li>
<li>
<p>模块
```javascript
function CoolModule(){
var something = &quot;cool&quot;;
var another = [1, 2, 3];</p>
<pre><code> function doSomething(){
 	console.log(something);
 }

 function doAnother(){
 	console.log(another.join(&quot;!&quot;));
 }

 return{
 	doSomething: doSomething,
 	doAnother: doAnother
 }
</code></pre>
<p>}</p>
<p>var foo = CoolModule();
foo.doSomething();
foo.doAnother();</p>
<p>// 现代模块
var MyModule = (function Manager(){
var modules = {};</p>
<pre><code> function define(name, deps, impl){
 	for(var i = 0; i &lt; deps.length; i ++){
 		deps[i] = modules[deps[i]];
 	}
 	modules[name] = impl.apply(impl, deps);
 }

 function get(name){
 	return modules[name];
 }

 return {
 	define: define,
 	get: get
 }
</code></pre>
<p>})();</p>
<p>MyModule.define(&quot;bar&quot;, [], function(){
function hello(who){
return &quot;Let me introduce: &quot; + who;
}</p>
<pre><code> return {
 	hello: hello
 }
</code></pre>
<p>})</p>
<p>MyModule.define(&quot;foo&quot;, [&quot;bar&quot;], function(bar){
var hungry = &quot;hippo&quot;;</p>
<pre><code> function awesome(){
 	console.log(bar.hello(hungry).toUpperCase());
 }

 return {
 	awesome: awesome
 }
</code></pre>
<p>})</p>
<p>var bar = MyModule.get(&quot;bar&quot;);
var foo = MyModule.get(&quot;foo&quot;);</p>
<p>console.log(bar.hello(&quot;hippo&quot;));</p>
<p>foo.awesome();
```</p>
</li>
</ol>
<h2 id="动态作用域">动态作用域</h2>
<pre><code class="language-javascript">// 假设 JS 引擎是词法作用域
function foo(){
	console.log(a);
}

function bar(){
	var a = 3;
	foo();
}
var a = 2;
bar();
</code></pre>
<p><a href="https://rextester.com/JHEGQ58380">Bash Demo</a></p>
<h2 id="this-词法">this 词法</h2>
<pre><code class="language-javascript">// this 的丢失
var obj = {
  id: &quot;awesome&quot;,
  cool: function coolFn(){
    console.log(this.id);
  }
}

var id = &quot;not awesome&quot;;

obj.cool(); 

setTimeout(obj.cool, 100);

// 解决办法
var obj = {
  count: 0,
  cool: function coolFn(){
    var self = this;
    
    if(self.count &lt; 1){
      setTimeout(function timer(){
        self.count ++;
        console.log(&quot;awesome&quot;);
      }, 100)
    }
  }
}

var obj = {
  count: 0,
  cool: function coolFn(){
    if(this.count &lt; 1){
      setTimeout(()=&gt;{
        this.count ++;
        console.log(&quot;awesome&quot;);
      } ,100);
    }
  }
}

var obj = {
  count: 0,
  cool: function coolFn(){
    if(this.count &lt; 1){
      setTimeout(function timer(){
        this.count ++;
        console.log(&quot;more awesome&quot;);
      }.bind(this), 100)
    }
  }
}
</code></pre>
]]></content>
    </entry>
</feed>